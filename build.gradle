import com.github.fracpete.rsync4j.RSync

import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths

apply plugin: "application"
apply plugin: "com.liferay.source.formatter"
apply plugin: "java"

dependencies {
	compile group: "com.googlecode.java-diff-utils", name: "diffutils", version: "1.3.0"
	compile group: "com.puppycrawl.tools", name: "checkstyle", version: "8.29"
	compile group: "com.thoughtworks.qdox", name: "qdox", version: "2.0-M5"
	compile group: "commons-io", name: "commons-io", version: "2.11.0"
	compile group: "commons-lang", name: "commons-lang", version: "2.6"
	compile group: "commons-logging", name: "commons-logging", version: "1.2"
	compile(group: "jaxen", name: "jaxen", version: "1.1.6") {
		exclude group: "com.ibm.icu", module: "icu4j"
	}
	compile group: "junit", name: "junit", version: "4.13.1"
	compile group: "org.antlr", name: "antlr4-runtime", version: "4.8-1"
	compile group: "org.apache.ant", name: "ant", version: "1.10.11"
	compile group: "org.apache.httpcomponents", name: "httpclient", version: "4.5.13"
	compile group: "org.apache.httpcomponents", name: "httpcore", version: "4.4.14"
	compile group: "org.apache.maven", name: "maven-artifact", version: "3.3.9"
	compile group: "org.dom4j", name: "dom4j", version: "2.1.3"
	compile group: "org.json", name: "json", version: "20230227"
	compile group: "org.reflections", name: "reflections", "version": "0.10.2"
	compile group: "xerces", name: "xercesImpl", version: "2.12.2"

	compile group: "com.liferay", name: "com.liferay.petra.function", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.petra.lang", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.petra.nio", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.petra.string", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.poshi.core", version: "latest.release"
	compile group: "org.codehaus.groovy", name: "groovy", version: "2.4.21"

	compile group: "biz.aQute.bnd", name: "biz.aQute.bndlib", version: "3.1.0"
	compile group: "com.liferay", name: "com.liferay.petra.concurrent", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.petra.memory", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.petra.reflect", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.petra.xml", version: "latest.release"
	compile group: "com.liferay", name: "com.liferay.portal.tools.java.parser", version: "latest.release"
	compile group: "com.liferay.portal", name: "com.liferay.portal.impl", version: "latest.release"
	compile group: "com.liferay.portal", name: "com.liferay.portal.kernel", version: "latest.release"
	compile group: "com.liferay.portal", name: "com.liferay.util.java", version: "latest.release"
	compile group: "org.apache.felix", name: "org.apache.felix.http.servlet-api", version: "1.1.2"
	compile group: "org.apache.maven", name: "maven-plugin-api", transitive: false, version: "3.0.4"
}

repositories {
	maven {
		url "https://repository.liferay.com/nexus/content/groups/public"
	}

	maven {
		url "https://repository-cdn.liferay.com/nexus/content/groups/public"
	}

	mavenCentral()
}

application {
	mainClassName = "com.liferay.source.formatter.SourceFormatter"
}

//======================================================================
// Custom tasks
//======================================================================

abstract class SyncCodeTask extends DefaultTask {
	Path getRepoDir() {
		def repoDir = project.findProperty('liferay.portal.repo.dir')
		if (repoDir == null) {
			throw new IllegalArgumentException("Please supply path to 'liferay.portal.repo.dir' in 'gradle.properties'")
		}
		return Paths.get((String) repoDir)
	}

	RSync createRSync() {
		return new RSync()
			.exclude("**/com/liferay/dev")
			.recursive(true)
			.delete(true)
			.deleteExcluded(false)
			.quiet(true)
	}
}

class PullCodeTask extends SyncCodeTask {
	@TaskAction
	def pullCode() {
		def repoDirPath = getRepoDir()
		def destinationDirPath = Paths.get("./src")
		def sourceFormatterDirPath = repoDirPath.resolve("modules/util/source-formatter")

		if (!Files.exists(destinationDirPath)) {
			destinationDirPath.toFile().mkdirs()
		}

		createRSync()
			.source(String.valueOf(sourceFormatterDirPath.resolve("src/main")))
			.destination(destinationDirPath.toString())
			.execute()
	}
}

class PushCodeTask extends SyncCodeTask {
	@TaskAction
	def pushCode() {
		def repoDirPath = getRepoDir()
		def destinationDirPath = repoDirPath.resolve("modules/util/source-formatter/src")
		def sourceDirPath = Paths.get("./src/main")

		if (!Files.exists(destinationDirPath)) {
			destinationDirPath.toFile().mkdirs()
		}

		createRSync()
			.source(sourceDirPath.toString())
			.destination(destinationDirPath.toString())
			.execute()
	}
}

tasks.register('pullCode', PullCodeTask) {
	group 'dev'
	description "Pulls code from liferay-portal"
}

tasks.register('pushCode', PushCodeTask) {
	group 'dev'
	description "Pushes changes to liferay-portal"
}